# Copyright 2021 Nikita Melekhin. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

kernel_out_path = "base/boot"

kernel_c_flags = [
  "-ffreestanding",
  "-Werror",
  "-Wno-address-of-packed-member",
]
kernel_asm_flags = []
kernel_ld_flags = []

if (kernel_symbols) {
  kernel_c_flags += [ "-ggdb" ]
}

if (optimize) {
  kernel_c_flags += [ "-Os" ]
}

if (device_type == "desktop") {
  kernel_c_flags += [ "-DTARGET_DESKTOP" ]
}
if (device_type == "mobile") {
  kernel_c_flags += [ "-DTARGET_MOBILE" ]
}

if (target_cpu == "x86") {
  kernel_c_flags += [
    "-mno-80387",
    "-mno-mmx",
    "-mno-sse",
    "-mno-sse2",
  ]
  kernel_asm_flags += [
    "-f",
    "elf",
  ]
  kernel_ld_flags += [
    "--oformat",
    "elf32-i386",
  ]
}

if (target_cpu == "aarch32") {
  kernel_c_flags += [
    "-fno-builtin",
    "-march=armv7-a",
    "-mfpu=neon-vfpv4",
    "-mfloat-abi=soft",
    "-fno-pie",
  ]
  kernel_asm_flags += [
    "-march=armv7-a",
    "-mfpu=neon-vfpv4",
    "-mfloat-abi=softfp",
    "-mcpu=cortex-a15",
  ]
  kernel_ld_flags += [ "-nostdlib" ]

  if (host == "gnu") {
    kernel_ld_flags += [
      "-nostdinc",
      "-nodefaultlibs",
      "-nostartfiles",
      "-lgcc",
    ]
  }

  if (host == "llvm") {
    kernel_ld_flags += [
      "--oformat",
      "elf32-littlearm",
      rebase_path("//toolchains/llvm_runtime/11.1.0/libclang_rt.builtins-arm.a",
                  root_build_dir),
    ]
  }
}

config("kernel_flags") {
  cflags = kernel_c_flags
  asmflags = kernel_asm_flags
  ldflags = kernel_ld_flags
  defines = [ "opuntiaOS_kernel" ]
}

kernel_src = exec_script("get_kernel_files.py",
                         [
                           rebase_path("//src", root_build_dir),
                           target_cpu,
                         ],
                         "list lines")

linker_script =
    rebase_path("//build/kernel/$target_cpu/kernel_link.ld", root_build_dir)

action("kernel_config") {
  script = "//build/kernel/gen_config.py"
  outputs = [ "$root_out_dir/base/boot/kernel.config" ]
  args = [
    rebase_path("$root_out_dir/base/boot/kernel.config", root_build_dir),
    "$target_cpu",
    "$host",
  ]
}

if (target_cpu == "aarch32") {
  # Use a strange __EMPTY_PATH_, empty string can't be passed as an arg.
  path_to_bins = "__EMPTY_PATH_"
  if (host == "llvm") {
    path_to_bins = llvm_bin_path
  }

  devtree_compile_script_args = [
    rebase_path("//firmware/$target_cpu/$target_board.odt", root_build_dir),
    rebase_path("$root_out_dir/firmware/$target_board.obt", root_build_dir),
    "$target_cpu",
    "$target_board",
    "$host",
    "$path_to_bins",
  ]

  action("devtree_compile") {
    script = "//build/kernel/devtree_compile.py"
    inputs = [ "//firmware/$target_cpu/$target_board.odt" ]
    outputs = [
      "$root_out_dir/firmware/$target_board.obt",
      "$root_out_dir/firmware/$target_board.obto",
    ]
    args = devtree_compile_script_args
  }
}

executable("kernel_build") {
  deps = [ ":kernel_config" ]
  if (target_cpu == "aarch32") {
    deps += [ ":devtree_compile" ]
  }

  output_name = "$kernel_out_path/kernel.bin"
  sources = kernel_src

  include_dirs = [ "//kernel/include" ]

  configs = [ ":kernel_flags" ]

  ldflags = []
  if (target_cpu == "aarch32") {
    ldflags += [ rebase_path("$root_out_dir/firmware/$target_board.obto",
                             root_build_dir) ]
  }
  ldflags += [ "-T$linker_script" ]
}

group("kernel") {
  deps = [ ":kernel_build" ]
  if (target_cpu == "x86") {
    deps += [ "//build/boot:boot" ]
  }
}
